---
name: Update arxiv.org stats
on:
  #schedule:
    # https://crontab.guru/every-day
    #- cron: "0 0 * * *"
  workflow_dispatch:
env:
  CSV_FILE: 'data/dummy-data.csv'
  TOPICS:  'cat:cs.CV+OR+cat:cs.LG+OR+cat:cs.CL+OR+cat:cs.AI+OR+cat:cs.NE+OR+cat:cs.RO'
  START_AT: 0
  END_AT: 2
jobs:
  updateArxivCsv:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: dev-arxiv-fetch-parse
      #    sparse-checkout: ${{ env.OUT_FILE }}
      #    sparse-checkout-cone-mode: false
      #- uses: actions/setup-python@v5
        # https://github.com/actions/setup-python
      #  with:
      #    python-version: '3.10'
      #    cache: 'pip' # caching pip dependencies
      - run: pip install 'feedparser==6.0.8' -Uqq # -r requirements.txt
      - name: fetch and parse statistics for arxiv.org
        # https://github.com/karpathy/arxiv-sanity-lite/blob/d7a303b410b0246fbd19087e37f1885f7ca8a9dc/aslite/arxiv.py#L38
        shell: python
        run: |
          # fetch and parse
          import time
          import feedparser
          import urllib.request
          # write to csv
          import csv
          #from random import random, choice, seed
          #from datetime import datetime, timezone
          
          def encode_feedparser_dict(d):
            """ helper function to strip feedparser objects using a deep copy """
            if isinstance(d, feedparser.FeedParserDict) or isinstance(d, dict):
                return {k: encode_feedparser_dict(d[k]) for k in d.keys()}
            elif isinstance(d, list):
                return [encode_feedparser_dict(k) for k in d]
            else:
                return d

          def parse_arxiv_url(url):
            """
            examples is http://arxiv.org/abs/1512.08756v2
            we want to extract the raw id (1512.08756) and the version (2)
            """
            ix = url.rfind('/')
            assert ix >= 0, 'bad url: ' + url
            idv = url[ix+1:] # extract just the id (and the version)
            parts = idv.split('v')
            assert len(parts) == 2, 'error splitting id and version in idv string: ' + idv
            return idv, parts[0], int(parts[1])
                
          for k in range(${{ env.START_AT }}, ${{ env.START_AT }} + ${{ env.END_AT }}, 100):
            # https://github.com/karpathy/arxiv-sanity-lite/blob/d7a303b410b0246fbd19087e37f1885f7ca8a9dc/aslite/arxiv.py#L15
            base_url = 'http://export.arxiv.org/api/query?'
            add_url = f"search_query=${{ env.TOPICS }}&sortBy=lastUpdatedDate&start={k}&max_results=100"
            #add_url = 'search_query=%s&sortBy=submittedDate&start=%d&max_results=100' % (${{ env.TOPICS }}, k)
            search_query = base_url + add_url
            with urllib.request.urlopen(search_query) as url:
                response = url.read()
            if url.status != 200:
                print(f"arxiv did not return status 200 response")
            out = []
           
            parse = feedparser.parse(response)

            print(f"{type(parse.entries)=}")

            for k, e in enumerate(parse.entries):
                j = encode_feedparser_dict(e)
                # extract / parse id information

                print(f"{k=}::{type(j)=}")
                print(f"{k=}::{j=}")

                idv, rawid, version = parse_arxiv_url(j['id'])

                print(f"{idv=}, {rawid=}, {version=}")

                # DEBUG
                '''
                j['_idv']= idv
                j['_id'] = rawid
                j['_version'] = version
                j['_time'] = time.mktime(j['updated_parsed'])
                j['_time_str'] = time.strftime('%b %d %Y', j['updated_parsed'])
                '''
                
                # delete apparently spurious and redundant information
                # del j['summary_detail']
                # del j['title_detail']

                print(f"{k=}::{o=}")
                
                out.append([
                  idv, rawid, version, 
                  time.mktime(j['updated_parsed']),
                  time.strftime('%b %d %Y', j['updated_parsed']),
                  k
                ])
              # TODO retry n-times if connection failes
              # TODO sort descending and check if paper already id present

            # DEBUG
            header = [debug_k_name, "id", "version", "time", "time_str"]
            
            with open("${{ env.CSV_FILE }}", 'a', newline='') as f: # encoding='UTF8'
              writer = csv.writer(f)
              writer.writerow(header)
              for o in out:
                writer.writerow(o)
      - name: push updated csv file back to main branch
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add $CSV_FILE
          git commit -m "Updated $CSV_FILE"
          git push
...
